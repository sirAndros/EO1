//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EdObjects.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEOEntities : DbContext
    {
        public DBEOEntities()
            : base("name=DBEOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Container> Container { get; set; }
        public virtual DbSet<ObjectInstance> ObjectInstance { get; set; }
        public virtual DbSet<ObjectType> ObjectType { get; set; }
        public virtual DbSet<Properties> Properties { get; set; }
        public virtual DbSet<PropertyType> PropertyType { get; set; }
        public virtual DbSet<PropertyValues> PropertyValues { get; set; }
        public virtual DbSet<Version> Version { get; set; }
    
        public virtual ObjectResult<GetInstancesValues_Result> GetInstancesValues(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInstancesValues_Result>("GetInstancesValues", typeIdParameter);
        }
    
        public virtual ObjectResult<GetDistinctName_Result> GetDistinctName(Nullable<int> typeId)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDistinctName_Result>("GetDistinctName", typeIdParameter);
        }
    
        public virtual ObjectResult<GetInstanceByName_Result> GetInstanceByName(string name, Nullable<int> typeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInstanceByName_Result>("GetInstanceByName", nameParameter, typeIdParameter);
        }
    
        public virtual int getPropertyValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getPropertyValue");
        }
    
        [DbFunction("DBEOEntities", "GetInstancesTree")]
        public virtual IQueryable<GetInstancesTree_Result> GetInstancesTree(Nullable<int> type)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetInstancesTree_Result>("[DBEOEntities].[GetInstancesTree](@type)", typeParameter);
        }
    
        public virtual ObjectResult<GetInstanceProperties_Result> GetInstanceProperties(Nullable<int> instanceID)
        {
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("instanceID", instanceID) :
                new ObjectParameter("instanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInstanceProperties_Result>("GetInstanceProperties", instanceIDParameter);
        }
    }
}
